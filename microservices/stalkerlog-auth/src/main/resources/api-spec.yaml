swagger: '2.0'
info:
  version: '1.0.0'
  title: Stalkerlog Auth API
  description: API to register users and get a JWT token.
  contact:
    name: Stalkerlog team
    email: luc.wachter@heig-vd.ch
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: localhost
basePath: /auth
schemes:
  - http

tags:
  - name: users
    description: Retrieve your information or update it
  - name: session
    description: Retrieve a JWT token
  - name: admin
    description: Operations available only to admin users

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:
  /registration:
    post:
      description: Create a new user
      operationId: postUser
      tags:
        - admin
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: user
          in: body
          description: The new user
          required: true
          schema:
            $ref: '#/definitions/user'
      responses:
        '201':
          description: Creation successful
          headers:
            Location:
              description: URL of the created resource
              type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized (must be an admin)

  /users/{id}:
    get:
      description: Get information on this user
      operationId: getUser
      tags:
        - users
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the user to retrieve
      responses:
        '200':
          description: Details of the user
          schema:
            $ref: '#/definitions/user'
        '401':
          description: Unauthorized
        '404':
          description: Resource doesn't exist
    put:
        description: Update the specified user
        operationId: putUser
        tags:
            - users
        consumes:
            - application/json
        security:
            - Bearer: []
        parameters:
            - in: path
              name: id
              type: integer
              required: true
              description: Numeric ID of the user to update
            - in: body
              name: user
              description: The updated user data
              required: true
              schema:
                  $ref: '#/definitions/user'
        responses:
            '200':
                description: Update successful
            '400':
                description: Bad request
            '401':
                description: Update unauthorized
            '404':
                description: Resource doesn't exist

    delete:
        description: Delete the specified user
        operationId: deleteUser
        tags:
            - users
        security:
            - Bearer: []
        parameters:
            - in: path
              name: id
              type: integer
              required: true
              description: Numeric ID of the user to remove
        responses:
            '204':
                description: Removal successful
            '401':
                description: Removal unauthorized
            '404':
                description: Resource doesn't exist

  /session:
    post:
      description: Get JWT token for this user
      operationId: getToken
      tags:
        - session
      produces:
        - application/json
      parameters:
        - in: body
          name: credentials
          required: true
          description: Credentials of the user to log in
          schema:
            $ref: '#/definitions/credentials'
      responses:
        '200':
          description: Details of the user
          schema:
            $ref: '#/definitions/token'
        '401':
          description: Unauthorized
        '404':
          description: Resource doesn't exist

definitions:
  user:
    type: object
    required:
      - email
      - firstName
      - lastName
      - password
      - isAdmin
    properties:
      email:
        type: string
        format: email
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
        format: password
      isAdmin:
        type: boolean
  credentials:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        format: password
  token:
    type: string
